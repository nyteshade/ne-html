{
  "version": 3,
  "sources": ["../../src/index.js", "../../src/html.js", "../../src/factories/levels.js"],
  "sourcesContent": ["export {HTML, commands} from './html.js';\nexport {Levels} from './factories/levels.js';\n", "/* html.js\n *\n * HTML is a class that aids with the JavaScript creation of HTML\n * elements in the browser. This is usually a multi-step process that\n * is significantly eased by having this helper class.\n *\n * MIT License\n *\n * Copyright (c) 2024 Brielle Harrison\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * Raptive Licensing Clause:\n * Notwithstanding the above, Brielle Harrison grants Raptive a\n * non-exclusive, non-transferable license to use, modify, and\n * distribute the Software within the scope of Raptive's business\n * operations. This license does not grant Raptive any ownership\n * rights to the Software, and any modifications or derivative works\n * created by Raptive shall be owned by Brielle Harrison. Brielle\n * Harrison retains full ownership of the Software and any future\n * versions developed by Brielle Harrison.\n */\n\n// Non-exported helpers to make the code cleaner\nconst isObj = o => o && typeof o === 'object';\nconst isArr = o => Array.isArray(o);\nconst isStr = o => typeof o === 'string';\n\n// Symbol identifier\nconst envPrefix = typeof process !== 'undefined' && process.env.NEJS_HTML_PREFIX;\nconst prefix = envPrefix || '@nejs.html';\n\n/**\n * Defines a collection of unique symbols used as commands within\n * the HTML module. These symbols are used to uniquely identify\n * various operations and settings within the HTML component system.\n *\n * @property {Symbol} parse - Initializes the parser. This is where\n * the logic and detection of whether or not to use ordered or named\n * parameters occurs.\n * @property {Symbol} parseOrdered - Initializes the parser with\n * ordered parameters.\n * @property {Symbol} parseNamed - Initializes the parser with\n * named parameters.\n * @property {Symbol} createStorage - Creates a global storage key.\n * @property {Symbol} register - Registers a new factory element.\n * @property {Symbol} define - Defines a new web component.\n * @property {string} prefix - The prefix used for all symbol\n * definitions. Defined outside the commands object, but shipped with\n * it for other parsing if desired.\n *\n * @example\n * // Register a new element factory\n * HTML[commands.register]('custom-element', elementFactoryFunction);\n */\nconst commands = {\n  parse: Symbol.for(`${prefix}.init.parser`),\n  parseOrdered: Symbol.for(`${prefix}.init.ordered.params`),\n  parseNamed: Symbol.for(`${prefix}.init.named.params`),\n  parseShadow: Symbol.for(`${prefix}.init.shadow.params`),\n\n  createStorage: Symbol.for(`${prefix}.global.storage.key`),\n\n  register: Symbol.for(`${prefix}.factory.element`),\n  registered: Symbol.for(`${prefix}.list.factory.elements`),\n  define: Symbol.for(`${prefix}.define.webcomponent`), // todo: implement this\n\n  additionalFunctions: Symbol.for(`${prefix}.result.prototype`),\n\n  prefix,\n}\n\nclass HTML {\n  /**\n   * Creates an HTML element based on specified options, applying\n   * attributes, styles, content, and potentially a shadow DOM with\n   * custom CSS variables.\n   *\n   * Strings supplied for 'content' will be wrapped in a DOM TextNode\n   * rather than applied as innerHTML; this is intentional.\n   *\n   * The HTML.create() method can receive its input in one of two\n   * manners, either in normal ordered input format (as with most\n   * functions) or it can be given a name and then supplied an object\n   * with more values. This latter format provides more flexibility\n   * and some helper values that translate automatically into their\n   * expected locations on the created element.\n   *\n   * Ordered Parameters (only name is required)\n   *   1. name - the tag name\n   *   2. content - optional string of content for the tag\n   *   3. style - an object with style properties that will be\n   *      applied as a style attribute. So `{ fontName: 'courier' }`\n   *      becomes `<tag style=\"font-name: 'courier';\">`\n   *   4. attributes - an object of additional tag attributes that\n   *      are applied using `element.setAttribute`. So an object\n   *      with `{ id: 'identifier' }` becomes `<tag id=\"identifier\">`\n   *   5. webComponentName - this must be supplied if the element\n   *      being created is a web component. This should be a string\n   *      that will automatically be converted to `{ is: value }`\n   *      before being used with `document.createElement()`\n   *   6. useDocument - a way to specify an alternate `document`\n   *      object than the global `document`. Can be used to denote\n   *      a frame's `document` or another window's `document`\n   *   7. children - an array of `HTMLElement` object instances that\n   *      or strings that will be appended to the created element.\n   *   8. shadow - if preset, this should be either an object or\n   *      an array. If supplied as an array, it will represent\n   *      `HTMLElement` instances that are inserted into the attached\n   *      shadowRoot of the created element. If it is an object it\n   *      should have the keys `options` and `children`. Omitting\n   *      either value will result in defaults being added. The\n   *      default shadow dom options are `{ mode: 'open',\n   *      clonable: true, slotAssignment: 'named' }`. These can\n   *      be overridden individually or as a whole by specifying\n   *      each and their new value in `{shadow: {options: { ... }}}`\n   *\n   * Object Parameters (only name is required)\n   *\n   *   1. name\n   *   2. config\n   *\n   * The config can process the above ordered properties when given\n   * as object keys. These map, in the same order, as the ordered\n   * parameters that were just described above:\n   *\n   *   `content`, `style`, `attributes`, `webComponentName`,\n   *   `useDocument`, `children`, `shadow`\n   *\n   * Additionally, the following properties can be supplied\n   *\n   *   - `class`: this property becomes a `class=\"value\"` attribute\n   *     on the resulting element.\n   *   - `classes`: this must be an array of strings, non-string\n   *     values will be ignored. Each will be joined with a space\n   *     in between and appended to any previously existing class\n   *     attribute. If no previous class attribute exists, one\n   *     will be created. If the resulting filter of non-strings\n   *     leaves an empty string, and not previous class attribute\n   *     was otherwise specified, no class attribute will be created\n   *   - `dataset`: any object supplied here will have its keys and\n   *     values set on the element.dataset object. When assigning\n   *     keys and values to this object in a browser they become\n   *     attributes on a tag with the 'data-' prefix. These values\n   *     must be valid names or an error will occur. Camel cased\n   *     values will be shown with dashes. So `'greatScott'` becomes\n   *     `<tag data-great-scott>`.\n   *\n   * A Proxy is included in the prototype chain of the HTML class,\n   * allowing first parameter, denoting the tags name, as a property\n   * on the HTML class itself. See examples below.\n   *\n   * @param {...*} args - Arguments to configure the element.\n   * @returns {Element} The newly created HTML element.\n   * @example\n   * // Create a simple element with content:\n   * const element = HTML.create('div', {content: 'Hello, world!'});\n   * document.body.appendChild(element);\n   *\n   * @example\n   * // Using the prototype chain proxy, simpler syntax can be\n   * // achieved.\n   * const element = HTML.div('Hello world');\n   * // <div>Hello world</div>\n   *\n   * // This syntax is also overloaded for convenience in many ways\n   * const element = HTML.div([\n   *   HTML.label({ for: 'input-name', content: 'Name' }),\n   *   HTML.input({ id: 'input-name, type: 'text' }),\n   * ])\n   * // <div>\n   * //   <label for=\"input-name\">Name</label>\n   * //   <input type=\"text\" id=\"input-name\">\n   * // </div>\n   */\n  static create() {\n    // Passed in arguments are validated and parsed using the\n    // relevant parser. See HTML[commands.parse] for more details\n    const options = HTML[commands.parse](...arguments);\n\n    // Shorthand for the parsed.useDocument value. Should never be\n    // null or undefined.\n    const doc = options?.useDocument ?? top.window.document;\n\n    // Reusable style sheet used and updated for all instances of the\n    // HTMLElement instances created. These are used specifically\n    // with the `cssVar` property `.get()` and `.set()` methods.\n    const reusableStyleSheet = new CSSStyleSheet();\n\n    // The first time that `cssVar` are used with an element that\n    // does not possess a `shadowRoot`, an element is created and\n    // placed in the DOM. This element has reused `id`, and since the\n    // contents of the inserted stylesheet are irrelevant after each\n    // call to `element.cssVar.set(key, value)`, the DOM element is\n    // reused. If no HTML class generated elements use `.cssVar`,\n    // then the expected value of `reusableStyleElement` is `null`.\n    let reusableStyleElement = doc.querySelector('style#htmljs');\n\n    // Create the element instance itself\n    const { tagName: _tag, webComponentName: _wcn } = options;\n    const element = doc.createElement(_tag, _wcn);\n\n    // Based on the parsed attributes, apply each value using\n    // logic depending on whether or not the key is an object\n    // rather than a string or symbol.\n    for (const [key, value] of options.attributes) {\n      if (isObj(key)) {\n        let attribute;\n        let { name, namespaceURI: ns, qualifiedName: qn } = key;\n\n        if (namespaceURI || qualifiedName) {\n          attribute = doc.createAttributeNS(ns, qn);\n          attribute.value = value;\n          element.setAttributeNodeNS(attribute);\n        }\n        else {\n          if (!isStr(name)) {\n            name = (!name && String(name)) || (\n              Object.valueOf.call(name).toString() ||\n              String(name)\n            );\n          }\n          attribute = doc.createAttribute(name);\n          attribute.value = value;\n          element.setAttributeNode(attribute);\n        }\n      }\n      else {\n        const validKey = (\n          (typeof key === 'symbol' && key) ||\n          String(key)\n        );\n        element.setAttribute(validKey, value);\n      }\n    }\n\n    // For each `key`, `value`, pair in the `options.style` object,\n    // apply to the `element.style` object. This action will\n    // modify the style values of the element and end up with\n    // a browser parsed style attribute on the element.\n    for (const [key, value] of Object.entries(options.style)) {\n      element.style[key] = value;\n    }\n\n    // ------------------------------------------------------------\n    // Note: `options.content` is not a substitue for `.innerHTML`\n    // intentionally. Create individual elements so that things\n    // like event or instance state on the elements are retained\n    // and not accidentally destroyed.\n    // ------------------------------------------------------------\n\n    // If the contents of the `options.content` property is a string,\n    // then a `Text` node is created with the strings contents and\n    // it is appended to the element.\n    if (isStr(options.content)) {\n      element.append(doc.createTextNode(options.content));\n    }\n    // Optionally if the options.content value is an Array, each\n    // element is blindly coerced into a String and wrapped in a\n    // browser `Text` node, before being appended in the supplied\n    // order to the element.\n    else if (isArr(options.content)) {\n      element.append(\n        ...(options.content.map(e => doc.createTextNode(String(e)))),\n      );\n    }\n\n    // Any child nodes/elements in the `options.children` array,\n    // will be appended to the element in the order they exist in\n    // the array.\n    for (const child of options.children) {\n      element.append(child);\n    }\n\n    // A truthy `.shadow` object property, validated in the init\n    // parse methods, will result in a `shadowRoot` being attached\n    // to the element. Any `.shadow.children` elements or nodes will\n    // be attached to the `shadowRoot` after being created. The\n    // default `.shadow.options` will be applied to the attached\n    // `shadowRoot`.\n    if (isObj(options.shadow)) {\n      const root = element.attachShadow(options.shadow.options);\n\n      if (options.shadow.children && options.shadow.children.length) {\n        root.append(...options.shadow.children);\n      }\n    }\n\n    // An object of validly named string keys to string values will\n    // be set on the `element.dataset` object. This action will\n    // generate the associated `data-` attributes on the element.\n    if (isObj(options?.dataset)) {\n      Object.assign(element.dataset, options.dataset);\n    }\n\n    // Apply some additional functions to the element post creation\n    // that can make life a bit easier.\n    HTML[commands.additionalFunctions]({\n      element, reusableStyleSheet, reusableStyleElement\n    });\n\n    Object.defineProperty(element, 'identifier', {\n      enumerable: false,\n      configurable: false,\n      writable: true,\n      value: `#${Math.random().toString(36).slice(2)}`,\n    });\n\n    return element;\n  }\n\n  /**\n   * Parses the provided arguments to construct a configuration\n   * object for creating an HTML element. This method dynamically\n   * determines the parsing strategy based on the number and type\n   * of arguments provided.\n   *\n   * @param {...*} args - The arguments used to configure the web\n   * component. The first argument is always the name of the\n   * component. The subsequent arguments determine the properties\n   * and children of the component.\n   * @returns {Object} The configuration object for the web component\n   * @throws {SyntaxError} If no arguments are provided.\n   * @example\n   * // Create a parsed arguments with default properties:\n   * const {parse} = commands;\n   * HTML[parse]('my-component');\n   *\n   * @example\n   * // Create parsed arguments with named properties:\n   * const {parse} = commands;\n   * HTML[parse]('my-component', {\n   *   id: 'unique-id',\n   *   class: 'container'\n   * });\n   *\n   * @example\n   * // Create parsed arguments with children defined\n   * // through an array:\n   * const {parse} = commands;\n   * HTML[parse]('my-component', ['child1', 'child2']);\n   */\n  static [commands.parse](...args) {\n    // Grab these out to make the code a bit more readable. Bind\n    // them in case relative static references are made to the HTML\n    // class itself.\n    const parseOrdered = this[commands.parseOrdered].bind(HTML);\n    const parseNamed = this[commands.parseNamed].bind(HTML);\n\n    // Only true error case; we need at least a tag name here\n    if (args.length === 0) {\n      throw new SyntaxError('HTML.create must have parameters!')\n    }\n\n    // If we get a string as the tagName we can proceed. All\n    // other parametes will be set to default by the call to\n    // `parseOrdered`.\n    if (args.length === 1) {\n      const tagName = String(args[0]);\n      return { tagName, ...(parseOrdered(tagName)) };\n    }\n\n    // If we get an object as the first parameter, this is either\n    // going to be an array or a config object.\n    else {\n      const tagName = args[0];\n      const rest = args.slice(1);\n      const firstParam = rest?.[0];\n\n      if (firstParam && typeof firstParam === 'object') {\n        // If the firstParam is an array, then a custom flow is\n        // enacted. All other ordered parameters will be checked as\n        // though an ordered parameter invocation has occurred. If\n        // `.content` has length but `.children` does not, then we\n        // assume `children` were sent as the `content` and `content`\n        // itself is set to `null` and its value is moved to\n        // `children`\n        if (Array.isArray(firstParam)) {\n          // Convert all remaining parameters\n          const result = {\n            tagName,\n            ...parseOrdered(tagName, ...rest)\n          };\n\n          // Special flow expectation. If `.children` is an empty\n          // array then the contents of `.content` is assumed to have\n          // been meant for `.children` as a shorthand.\n          //\n          // Note: in the case that `.children` has `length` and\n          // `.content` also is an array with `length`. Then the\n          // elements of `.content` will be coerced into strings in\n          // the `HTML.create()` call.\n          if (result.children.length === 0) {\n            result.children = result.content;\n            result.content = undefined;\n          }\n\n          return result;\n        }\n\n        // If we made it here, we assume we have a config object that\n        // needs to be parsed by `parsedNamed`.\n        return { tagName, ...(parseNamed(tagName, firstParam)) };\n      }\n\n      // At this point, we can only assume that we have an ordered\n      // set of parameters and that flow will be invoked.\n      return { tagName, ...parseOrdered(tagName, ...rest) };\n    }\n  }\n\n  /**\n   * Constructs an object representing the configuration for a web\n   * component, including its content, styles, attributes, and\n   * shadow DOM options.\n   *\n   * @param {string} content - The inner content of the web component.\n   * @param {Object} [style={}] - CSS styles to apply to the\n   * component.\n   * @param {Object} [attributes={}] - HTML attributes to set on\n   * the component.\n   * @param {string} [webComponentName] - Name for custom element\n   * registration.\n   * @param {Document} [useDocument=document] - The document context\n   * to use.\n   * @param {Array} [children=[]] - Child elements to append to the\n   * component.\n   * @param {boolean} [addShadowDOM=false] - Whether to attach a\n   * shadow DOM.\n   * @param {Object} [shadowDOMOpts={}] - Options for the shadow DOM.\n   * @param {Array} [shadowChildren=[]] - Children to append to the\n   * shadow DOM.\n   * @returns {Object} The configuration object for the web component.\n   *\n   * @example\n   * const symbol = Symbol.for('@raptive.html.init.ordered.params')\n   * const config = HTML[symbol](\n   *   'Hello, World!', {}, {}, 'my-component', document, [], true,\n   *   { mode: 'open', clonable: true, slotAssignment: 'named' }, []\n   * );\n   */\n  static [commands.parseOrdered](\n    tagName, content, style, attributes, webComponentName,\n    useDocument, children, shadow,\n  ) {\n    // The shadow object's presence, lets us know we wish to\n    // add a shadow DOM to the element being created.\n    const _shadow = HTML[commands.parseShadow](tagName, shadow);\n\n    // When webComponentName is supplied to document.createElement,\n    // it must be encapsulated in an object with the `is` property\n    if (webComponentName) {\n      webComponentName = { is: webComponentName };\n    }\n\n    // Convert any non-Map object supplied for `.attributes` to\n    // a map with the same keys and values. If an array of [key,\n    // value] entry arrays is supplied, that array is blindly\n    // passed to the new Map constructor. Handle with care!\n    if (isObj(attributes) && !(attributes instanceof Map)) {\n      attributes = new Map(isArr(attributes)\n        ? attributes\n        : Object.entries(attributes)\n      );\n    }\n\n    return {\n      content,\n      style: style ?? {},\n      attributes: attributes ?? new Map(),\n      webComponentName: webComponentName ?? undefined,\n      useDocument: useDocument ?? document,\n      children: children ?? [],\n      shadow: _shadow,\n    };\n  }\n\n  /**\n   * Parses the named parameters and initializes the object with\n   * additional attributes if specified. This method handles the\n   * extraction and assignment of properties from a parameter object\n   * to a new object with structured attributes for web components.\n   *\n   * @param {Object} params - The parameters object containing all\n   * settings.\n   * @param {string} params.content - The content for the web\n   * component.\n   * @param {Object} params.style - The style settings for the web\n   * component.\n   * @param {Object} params.attributes - Initial attributes for the\n   * web component.\n   * @param {string} params.webComponentName - The tag name for the\n   * web component.\n   * @param {Document} params.useDocument - The document to be used\n   * for creating elements.\n   * @param {Array} params.children - Child elements of the web\n   * component.\n   * @param {Object} params.shadow - Shadow DOM settings for the web\n   * component.\n   * @param {string} params.class - Class attribute for the web\n   * component.\n   * @param {string} params.id - ID attribute for the web component.\n   * @param {Array} params.classes - Additional classes for the web\n   * component.\n   * @returns {Object} The parsed object with structured web\n   * component settings.\n   *\n   * @example\n   * const {parseNamed} = commands\n   * const params = {\n   *   content: 'Example',\n   *   style: { color: 'red' },\n   *   attributes: { 'data-type': 'primary' },\n   *   webComponentName: 'custom-element',\n   *   useDocument: document,\n   *   children: [],\n   *   shadow: {},\n   *   class: 'main-class',\n   *   id: 'unique-id',\n   *   classes: ['additional-class', 'theme-dark']\n   * };\n   * const componentConfig = HTML[parseNamed](params);\n   *\n   * // Note that componentConfig will now have normalized even the\n   * // helpers like class, id, and classes. Attributes should now\n   * // look like this:\n   * console.log(componentConfig.attributes);\n   * // {\n   * //   'data-type': 'primary',\n   * //   id: 'main-class',\n   * //   class: 'main-class additional-class theme-dark'\n   * // }\n   */\n  static [commands.parseNamed](tagName, params) {\n    // Extract expected properties for ordered params\n    // as well as object init helpers\n    const {\n      // ordered parameters\n      content, style, attributes, webComponentName,\n      useDocument, children, shadow,\n\n      // helpers when using object init\n      class: klass, classes, dataset,\n\n      // all other keys are assumed to be attributes\n    } = params;\n\n    const ignoredKeys = Object.keys({\n      content, style, attributes, webComponentName,\n      useDocument, children, shadow, class: klass,\n      classes, dataset,\n    })\n\n    // parse the ordered parameters\n    const parsed = this[commands.parseOrdered](\n      tagName, content, style, attributes, webComponentName,\n      useDocument, children, shadow,\n    );\n\n    // if we have a class property and its a string, set it\n    // as an attribute to ease excess typing\n    if (isStr(klass)) {\n      parsed.attributes.set('class', klass);\n    }\n\n    // if classes is defined, and its an array, fetch all its\n    // string elements and set them, separated by spaces, after\n    // any previously defined class, as an attribute on the\n    // element. If the class string is an empty string (i.e. with\n    // 0 length), remove it from the attributes object so we\n    // don't get a useless attribute taking up bytes.\n    if (isArr(classes)) {\n      const newClass = [\n        (parsed.attributes.get('class') || ''),\n        classes.filter(item => isStr(item)).join(' '),\n      ].join(' ').trim();\n\n      if (newClass) {\n        parsed.attributes.set('class', newClass);\n      }\n      else if (\n        parsed.attributes.has('class') &&\n        !parsed.attributes.get('class')\n      ) {\n        parsed.delete('class');\n      }\n    }\n\n    // Only allow the setting of a `.dataset` property if the\n    // value is a non-array object.\n    if (isObj(dataset) && !isArr(dataset)) {\n      parsed.dataset = dataset;\n    }\n\n    // Convert all remaining non-special keys into attributes\n    // in the resulting element.\n    const convertToAttributes = Object.keys(params).filter(\n      key => !ignoredKeys.some(ignoredKey => ignoredKey === key)\n    );\n\n    for (const attrKey of convertToAttributes) {\n      parsed.attributes.set(attrKey, params[attrKey]);\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Parses the provided tag name and shadow DOM options to\n   * determine if a shadow DOM can be attached to the specified\n   * element. It validates the element against a set of criteria\n   * including tag name and the presence of a hyphen, which is\n   * required for custom elements that support shadow DOM.\n   *\n   * @param {string} tagName - The name of the tag to which the\n   * shadow DOM might be attached.\n   * @param {Object} shadowDOMOptions - Configuration options for\n   * the shadow DOM, including whether to force attachment with\n   * `tryAnyhow`.\n   * @returns {Object|undefined} The normalized shadow DOM options\n   * if the element is valid, otherwise `undefined`.\n   *\n   * @example\n   * // To parse shadow DOM options for a custom element:\n   * const shadowOptions = HTML[commands.parseShadow](\n   *  'my-custom-element', { tryAnyhow: false }\n   * );\n   */\n  static [commands.parseShadow](tagName, shadowDOMOptions) {\n    if (!shadowDOMOptions) {\n      return undefined;\n    }\n\n    let _shadow = isObj(shadowDOMOptions) && shadowDOMOptions;\n\n    // Set some default, but overridable options for our created\n    // shadow DOM\n    let options = {\n      mode: 'open',\n      clonable: true,\n      slotAssignment: 'named',\n    };\n\n    // First we must validate that an element can have a shadow\n    // dom according to MDN docs, before processing options.shadow\n    const supportedElements = [\n      'article', 'aside', 'blockquote', 'body', 'div', 'footer',\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'main', 'nav',\n      'p', 'section', 'span'\n    ];\n\n    // Not in the list, or not containing a dash in the tag name,\n    // means that the element cannot have an attached shadow dom\n    // Unsupported, you can try to force it using shadow.tryAnyhow\n    // but expect it to fail and throw an error.\n    if (_shadow && (!_shadow?.tryAnyhow &&\n      !(tagName.includes('-') || supportedElements.includes(tagName))\n    )) {\n      _shadow = undefined;\n      console.warn([\n        `Elements with a name of \"${tagName}\" cannot `,\n        `have an attached shadow DOM. Please see MDN documents.\\n`,\n        `Supported elements are any with a dash in their name\\n`,\n        `or any of these:\\n`,\n        `  ${supportedElements.join(',')}\\n`\n      ].join(''));\n    }\n\n    // If `_shadow` is truthy, it means that we need to normalize\n    // the supplied shadow values. It can be supplied as an array\n    // signaling that the children of the supplied shadow object\n    // should be children of the shadow DOM as opposed to those\n    // of the element directly. If a whole object is supplied with\n    // both `options` and `children` then we normalize those too\n    if (_shadow) {\n      // See if we have an object specifying options, remember that\n      // arrays are also considered objects.\n      const existingOpts = _shadow?.options ?? {};\n\n      // Check to see if we have supplied a `children` property in\n      // the supplied object.\n      const existingKids =\n        (isArr(_shadow?.children) && _shadow.children) || undefined;\n\n      // If the _shadow object is an array, let's use its value as\n      // the children property of our returned shadow object\n      if (isArr(_shadow)) {\n        _shadow = {children: _shadow};\n      }\n\n      // If the _shadow object is an object but not an array, then\n      // create a children property and assign any extracted children\n      else {\n        _shadow.children = existingKids ?? [];\n      }\n\n      // Lastly, at this point we should have an object, not an array,\n      // for the value of `_shadow`. Let's ensure the options use our\n      // defaults and then overlay any previously extracted options\n      // on top.\n      _shadow.options = { ...options, ...existingOpts };\n    }\n\n    return _shadow;\n  }\n\n  /**\n   * Defines additional functions on an element, particularly for\n   * managing CSS variables through a dynamic interface. This\n   * method enhances an element with methods to get and set CSS\n   * variables efficiently, using either a shadow DOM or the global\n   * document.\n   *\n   * @param {Object} config - The configuration object for\n   * additional functions.\n   * @param {Element} config.element - The DOM element to which the\n   * functions will be attached.\n   * @param {CSSStyleSheet} [config.reusableStyleSheet] - A reusable\n   * style sheet for efficient style management. Optional.\n   * @param {HTMLStyleElement} [config.reusableStyleElement] - A\n   * style element that can be reused for dynamic style changes.\n   * Optional.\n   * @param {Object} [config.descriptorBase] - Base configuration\n   * for property descriptors applied to the element.\n   *\n   * @example\n   * // Define additional CSS variable functions on a custom element\n   * MyCustomElement.additionalFunctions({\n   *   element: document.querySelector('#myElement'),\n   *   descriptorBase: { enumerable: true, configurable: true }\n   * });\n   */\n  static [commands.additionalFunctions]({\n    element, reusableStyleSheet, reusableStyleElement,\n    descriptorBase = { enumerable: false, configurable: true },\n  }) {\n    Object.defineProperty(element, 'cssVar', { ...descriptorBase,\n      value: {\n        /**\n         * Retrieves the value of a CSS variable from the specified\n         * layer or the default document or shadow root.\n         *\n         * @param {string} variableSansLeadingDashes - The CSS\n         * variable name without the leading '--'.\n         * @param {Element|ShadowRoot|Document} [layer] - The context\n         * from which to retrieve the CSS variable. If not specified,\n         * defaults to the element's shadowRoot or the document.\n         * @returns {string|null} The value of the CSS variable,\n         * or null if not found.\n         * @throws {Error} If no root is found or if the variable\n         * name is invalid.\n         * @example\n         * // Assuming there is a CSS variable `--main-color`\n         * // defined in the document:\n         * const color = element.cssVar.get('main-color');\n         * console.log(color); // Outputs the value of `--main-color`\n         */\n        get(variableSansLeadingDashes, layer) {\n          const key = `--${variableSansLeadingDashes}`;\n          const root = layer ? layer : (element?.shadowRoot || doc);\n\n          if (!root || !key.startsWith('--')) {\n            throw new Error([\n              'Invalid arguments: root and valid CSS variable name',\n              'are required.'\n            ].join(' '));\n          }\n\n          const el = root?.host ?? document.documentElement;\n          const styles = getComputedStyle(el);\n          const value = styles.getPropertyValue(key).trim();\n\n          return value || null;\n        },\n\n        /**\n         * Sets a CSS variable on the specified layer or the default\n         * document or shadow root.\n         *\n         * This method dynamically determines the appropriate CSS\n         * layer (`:host` for shadow DOM, `:root` for the document)\n         * and applies the CSS variable. If the shadow DOM or\n         * document supports `adoptedStyleSheets`, it uses them;\n         * otherwise, it falls back to creating or updating a\n         * `<style>` element in the document head.\n         *\n         * @param {string} variableSansLeadingDashes - The CSS\n         * variable name without the leading '--'.\n         * @param {string} value - The value to set for the CSS\n         * variable.\n         * @param {Element|ShadowRoot|Document} [layer] - The context\n         * in which to set the CSS variable. Defaults to the\n         * element's shadowRoot or the document.\n         *\n         * @example\n         * // Set the CSS variable `--main-color` to `blue` in the\n         * // document:\n         * element.cssVar.set('main-color', 'blue');\n         *\n         * @example\n         * // Set the CSS variable `--main-color` to `blue` in a\n         * // specific shadow root:\n         * element.cssVar.set('main-color', 'blue', someShadowRoot);\n         */\n        set(variableSansLeadingDashes, value, layer) {\n          const root = layer ? layer : (element?.shadowRoot || doc);\n          const key = `--${variableSansLeadingDashes}`;\n          const cssLayer = element.shadowRoot ? ':host' : ':root';\n          const style = `${cssLayer} { ${key}: ${value}; }`;\n\n          reusableStyleSheet.replaceSync(style);\n\n          if (root?.adoptedStyleSheets) {\n            root.adoptedStyleSheets = [reusableStyleSheet];\n          }\n          else {\n            if (!reusableStyleElement) {\n              reusableStyleElement = HTML.style({\n                id: 'html_reusable_style_sheet',\n                content: style\n              });\n              document.head.appendChild(reusableStyleElement);\n            }\n            else {\n              reusableStyleElement\n                .textContent = [...reusableStyleSheet]\n                .map(rule => rule.cssText)\n                .join(' ');\n            }\n          }\n        }\n      }}\n    );\n\n    Object.defineProperty(element, 'addTo', { ...descriptorBase,\n      /**\n       * As the name of the function indicates, it adds this instance\n       * of HTMLElement to an element specified by the supplied\n       * CSS selector. If the `element` exists in the `document`, then\n       * an attempt to insert this instance into that `element`.\n       *\n       * @param {string} selector - the CSS selector supplied to\n       * denote the element within which this instance of HTMLElement\n       * is to be inserted.\n       * @param {Document} doc - an alternate document object with a\n       * `<body>` tag you wish to use other than `top.window.document`\n       * @returns {boolean} `true` if the insertion was successful,\n       * `false` otherwise.\n       */\n      value: function addTo(selector, doc = top.window.document) {\n        const located = doc.querySelector(selector);\n\n        if (located?.append && typeof located.append === 'function') {\n          located.append(this);\n          return true;\n        }\n        else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(element, 'addToBody', { ...descriptorBase,\n      /**\n       * As the name of the function indicates, it adds this instance\n       * of HTMLElement to the document.body. It's a small helper to\n       * reduce typing.\n       *\n       * @param {Document} doc - an alternate document object with a\n       * `<body>` tag you wish to use other than `top.window.document`\n       * @returns {boolean} `true` if the insertion was successful,\n       * `false` otherwise.\n       */\n      value: function addToBody(doc = top.window.document) {\n        doc?.body?.append(this);\n        return doc?.body?.contains(this);\n      }\n    });\n\n    Object.defineProperty(element, 'addToHead', { ...descriptorBase,\n      /**\n       * Adds this instance of HTMLElement to the document.head.\n       * It's a small helper to reduce typing.\n       *\n       * @param {Document} doc - an alternate document object with a\n       * `<head>` tag you wish to use other than `top.window.document`\n       * @returns {boolean} true if the insertion was successful,\n       * false otherwise.\n       */\n      value: function addToBody(doc = top.window.document) {\n        doc?.head?.append(this);\n        return doc?.head?.contains(this);\n      }\n    });\n  }\n\n  /**\n   * Creates or accesses a storage map for managing primary and sub\n   * keys. This method ensures that a unique storage is available\n   * globally for specified keys, allowing for structured data\n   * storage across different components or modules.\n   *\n   * @param {string} forPrimaryKey - The primary key under which to\n   * store or retrieve data.\n   * @param {string} forSubKey - The sub key under which to store or\n   * retrieve data within the primary key's map.\n   * @param {boolean} [create=true] - Determines whether to create\n   * a new storage map if one does not exist for the provided keys.\n   * @returns {Map} Returns the storage map associated with the sub\n   * key, or the primary key if no sub key is provided, or the\n   * entire storage if neither key is provided.\n   *\n   * @example\n   * // Create or access storage for a primary key 'userSettings'\n   * // and sub key 'theme'\n   * const themeStorage = HTML[commands.createStorage](\n   *   'userSettings', 'theme'\n   * );\n   * // Use the storage to set a new theme\n   * themeStorage.set('color', 'dark');\n   */\n  static [commands.createStorage](\n    forPrimaryKey,\n    forSubKey = null,\n    create = true\n  ) {\n    let _present = Reflect.has(globalThis, commands.createStorage);\n\n    const [hasStorage, storage] = [\n      _present,\n      (_present && globalThis[commands.createStorage]) || new Map()\n    ];\n    if (!hasStorage) {\n      globalThis[commands.createStorage] = storage;\n    }\n\n    const _pkTmp = create && new Map() || undefined;\n    const [hasPkData, pkData] = [\n      storage.has(forPrimaryKey),\n      forPrimaryKey && (storage.get(forPrimaryKey) ?? _pkTmp)\n    ];\n\n    const _skTmp = create && new Map() || undefined;\n    const [hasSkData, skData] = [\n      pkData?.has(forSubKey),\n      forSubKey && (pkData?.get(forSubKey) ?? _skTmp)\n    ];\n\n    if (!hasPkData && pkData) {\n      storage.set(forPrimaryKey, pkData);\n    }\n\n    if (!hasSkData && skData) {\n      pkData?.set(forSubKey, skData);\n    }\n\n    return skData || pkData || storage;\n  }\n\n  static [commands.register](name, factoryFunction, config = {}, thisArg, ...args) {\n    const storage = HTML[commands.createStorage](\n      commands.register,\n      name,\n    );\n\n    storage.set('factory', factoryFunction);\n    storage.set('config', config);\n    storage.set('thisArg', thisArg);\n    storage.set('args', args);\n  }\n\n  static *[commands.registered]() {\n    const storage = HTML[commands.createStorage](\n      commands.register,\n    );\n\n    for (const [elementName, metadata] of storage.entries()) {\n      yield [elementName, metadata];\n    }\n  }\n}\n\n// Duplicates the Function.prototype object so we don't affect it\nconst prototype = Object.create(Function.prototype);\n\n// Applies a Proxy around the duplicated Function.prototype\nconst proxiedProto = new Proxy(\n  prototype,\n  {\n    get(target, property, receiver) {\n      const factoryElements = HTML[commands.createStorage](\n        commands.register, property, false\n      );\n\n      if (factoryElements) {\n        const factory = factoryElements.get('factory');\n        const config = factoryElements.get('config');\n        const thisArg = factoryElements.get('thisArg');\n        const args = factoryElements.get('args') ?? [];\n\n        if (\n          typeof factory === 'function' &&\n          typeof config === 'object'\n        ) {\n          if (\n            thisArg &&\n            !factory.prototype &&\n            factory.toString().includes('=>')\n          ) {\n            console.warn([\n              `HTML[${property}] is likely a big arrow function and`,\n              `it was registered with a \\`thisArg\\` value. This`,\n              `will not work as expected. You have been warned!`,\n            ].join(' '))\n          }\n          return ((...args) => factory.call(thisArg, config, ...args));\n        }\n      }\n\n      if (typeof property === 'string' && property !== 'create') {\n        return HTML.create.bind(HTML, property);\n      }\n\n      return Reflect.get(target, property, receiver);\n    },\n  },\n);\n\n// Sets the prototype of the HTML class to the proxied Function\n// prototype copy, ensuring that nothing detects anything odd\n// about the HTML class itself, in spite of it having a custom\n// proxy in its prototype chain.\nObject.setPrototypeOf(HTML, proxiedProto);\n\n// Register some basics\n\nHTML[commands.register]('script:src', function scriptSource(\n  config,\n  source,\n  attrs,\n) {\n  if (!source && typeof source !== 'string') {\n    throw new SyntaxError('HTML[\"script:src\"] must have a source param');\n  }\n\n  const src = String(source);\n  const attributes = attrs ?? {};\n\n  return HTML.script({\n    src,\n    attributes,\n    type: 'application/javascript'\n  });\n}, {});\n\nHTML[commands.register]('script:module', function scriptSource(\n  config,\n  srcOrImports,\n  initialContent,\n  attrs,\n) {\n  let src = undefined;\n  let imports = [];\n\n  if (srcOrImports) {\n    if (Array.isArray(srcOrImports)) {\n      imports = srcOrImports.map(item => {\n        if (Array.isArray(item)) {\n          const [nameOrNames, from] = item;\n          let names = nameOrNames;\n          if (!Array.isArray(nameOrNames)) {\n            names = [String(nameOrNames)];\n          }\n          return `import { ${names.join(', ')} } from '${from}';`\n        }\n        else {\n          return `import * from '${String(item)}';`;\n        }\n      });\n    }\n    else if (typeof srcOrImports === 'string') {\n      src = srcOrImports;\n    }\n  }\n\n  const attributes = attrs ?? {};\n  let content = initialContent;\n\n  if (src) {\n    attributes.src = src;\n  }\n\n  if (imports.length) {\n    content = `${imports.join('\\n')}\\n\\n${content || ''}`;\n  }\n\n  return HTML.script({\n    content,\n    attributes,\n    type: 'module'\n  });\n}, {});\n\nHTML[commands.register]('link:rel', function scriptSource(\n  config,\n  url,\n  rel = \"stylesheet\",\n  attrs,\n) {\n  if (!url && typeof url !== 'string') {\n    throw new SyntaxError('HTML[\"link:rel\"] must have a url param');\n  }\n\n  const href = String(url);\n  const attributes = attrs ?? {};\n\n  return HTML.link({\n    href,\n    rel,\n    attributes,\n  });\n}, {});\n\nexport { HTML, commands };\nexport default HTML;\n", "import { HTML, commands } from '../html.js';\n\nexport function Levels(\n  options,\n  argLabel = undefined,\n  argStyles\n) {\n  const opportunities = ['low', 'medium', 'high'];\n  let {preset, solid, label, signal, noBackground, percent} = options;\n\n  preset = argStyles?.preset ?? preset;\n  solid = argStyles?.solid ?? solid;\n  label = argLabel ?? argStyles?.label ?? label;\n  signal = argStyles?.signal ?? signal;\n  noBackground = argStyles?.noBackground ?? noBackground;\n\n  if (typeof percent !== 'undefined') {\n    preset = undefined;\n    percent = Math.min(100, Math.max(0, parseInt(percent)));\n  }\n\n  const levelSheet = new CSSStyleSheet();\n  const elemSize = { w: 12, h: 32 };\n  const boxSize = { w: signal ? elemSize.w * 3 : elemSize.w };\n\n  const element = HTML.section({\n    class: 'levels',\n    shadow: [\n      HTML.style(generateCSS(elemSize)),\n      HTML.article([\n        HTML.figure({\n          class: `levels ${preset}`,\n          children: [\n            HTML.figure({class: `level`}),\n          ].concat(signal ? [\n            HTML.figure({class: `level`}),\n            HTML.figure({class: `level`}),\n          ] : [])\n        }),\n      ]),\n    ],\n  });\n\n  const [article, levels] = ['article', '.levels']\n    .map(s => element.shadowRoot.querySelector(s));\n\n  if (article && label && typeof label === 'string') {\n    article.append(HTML.span({\n      content: label,\n      class: 'label'\n    }));\n  }\n\n  if (levels) {\n    const classes = [\n      !!solid && 'solid',\n      !!signal && 'signal-aspect',\n      !!noBackground && 'no-background',\n    ].filter(className => className);\n\n    levels.classList.add(...classes);\n  }\n\n  Object.defineProperty(element, 'setLevel', {\n    value(percent) {\n      if (!signal) {\n        this.cssVar.set('level-height', `${percent}%`);\n      }\n      else {\n        levels[0].style.display = percent === 0 ? 'none' : '';\n        levels[1].style.display = percent <= 66 ? 'none' : '';\n        levels[2].style.display = percent < 100 ? 'none' : '';\n      }\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n\n  if (percent) {\n    element.setLevel(percent);\n  }\n\n  return element;\n};\n\nfunction generateCSS(elemSize) {\n  return `\n    :host {\n      --low-color: #8691B6;\n      --medium-color: #5D6C9E;\n      --high-color: #202B50;\n      --gradient-height: ${elemSize.h}px;\n      --per-level-height: calc(var(--gradient-height) / 3);\n      --level-height: 0%;\n      --standard-box-shadows:\n        inset 1px 0px 0px rgba(255 255 255 / 20%),\n        inset 0px 1px 0px 0px rgba(255 255 255 / 40%),\n        inset ${elemSize.w - 1}px 1px 0px 0px rgba(255 255 255 / 40%);\n      --standalone-box-shadows:\n        inset 1px 0px 0px rgba(255 255 255 / 20%),\n        inset 0px 1px 0px 0px rgba(255 255 255 / 40%),\n        inset 11px 1px 0px 0px rgba(255 255 255 / 40%),\n        0px 1px 0px 0px rgb(32 43 80 / 63%);\n\n      font-family:\n        Tenorite, -apple-system, \"system-ui\", \"Segoe UI\",\n        Roboto, Oxygen-Sans, Ubuntu, Cantarell;\n      font-size: 0;\n      margin: 0 4px;\n\n      display: inline-flex;\n      flex-direction: row;\n      flex-wrap: nowrap;\n      align-items: center;\n    }\n\n    article {\n      display: inline-flex;\n      flex-direction: row;\n      flex-wrap: nowrap;\n      align-items: center;\n\n      figure.levels {\n        background-color: darkgray;\n        border: 1px solid white;\n        box-shadow:\n          1px 1px 3px rgb(0 0 0 / 25%),\n          inset 1px 1px 2px rgb(0 0 0 / 45%);\n        display: inline-flex;\n        font-size: 16px;\n        height: 32px;\n        margin: 0;\n        padding: 0;\n        position: relative;\n        width: ${elemSize.w}px;\n\n        &.no-background {\n          background-color: unset;\n          border: unset;\n          box-shadow: unset;\n\n          figure.level {\n            box-shadow: var(--standalone-box-shadows);\n          }\n        }\n\n        &.signal-aspect {\n          width: ${elemSize.w * 3}px;\n\n          figure.level {\n            opacity: 33%;\n          }\n\n          figure.level:nth-child(1) {\n            left: 0;\n            height: 33%;\n          }\n\n          figure.level:nth-child(2) {\n            height: 66%;\n            left: ${elemSize.w}px;\n          }\n\n          figure.level:nth-child(3) {\n            height: 100%;\n            left: ${elemSize.w * 2}px;\n          }\n\n          &.no-background {\n            filter: drop-shadow(1px 1px 1px rgb(0 0 0 /50%));\n\n            figure.level {\n              opacity: 33%;\n              display: unset !important;\n            }\n\n            &.low {\n              figure.level:nth-child(1) {\n                height: 33%;\n                opacity: 100%;\n              }\n            }\n\n            &.medium {\n              figure.level:nth-child(1),\n              figure.level:nth-child(2) {\n                opacity: 100%;\n              }\n            }\n\n            &.high {\n              figure.level:nth-child(1),\n              figure.level:nth-child(2),\n              figure.level:nth-child(3) {\n                opacity: 100%;\n              }\n            }\n          }\n\n          &.solid {\n            figure.level:nth-child(1) {\n              background-image: unset;\n              background-color: var(--low-color);\n            }\n            figure.level:nth-child(2) {\n              background-image: unset;\n              background-color: var(--medium-color);\n            }\n            figure.level:nth-child(3) {\n              background-image: unset;\n              background-color: var(--high-color);\n            }\n          }\n\n          &.low {\n            figure.level:nth-child(1) {opacity: 100%;}\n          }\n\n          &.medium {\n            figure.level:nth-child(1),\n            figure.level:nth-child(2) {opacity: 100%;}\n          }\n\n          &.high {\n            figure.level:nth-child(1),\n            figure.level:nth-child(2),\n            figure.level:nth-child(3) {opacity: 100%;}\n          }\n        }\n\n        &.low {\n          figure.level {\n            height: 33%;\n            left: 0;\n          }\n\n          &.solid {\n            figure.level:only-child,\n            figure.level:nth-child(1) {\n              background-image: unset !important;\n              background-color: var(--low-color);\n            }\n          }\n        }\n\n        &.medium {\n          figure.level {\n            height: 66%;\n            left: 0\n          }\n\n          &.solid {\n            figure.level:only-child,\n            figure.level:nth-child(2) {\n              background-image: unset !important;\n              background-color: var(--medium-color);\n            }\n          }\n        }\n\n        &.high {\n          figure.level {\n            height: 100%;\n            left: 0\n          }\n\n          &.solid {\n            figure.level:only-child,\n            figure.level:nth-child(3) {\n              background-image: unset !important;\n              background-color: var(--high-color);\n            }\n          }\n        }\n\n        figure.level {\n          margin: 0;\n          padding: 0;\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          height: var(--level-height);\n          width: ${elemSize.w}px;\n          background-image: linear-gradient(\n            to top,\n            var(--low-color) var(--per-level-height),\n            var(--medium-color) calc(var(--per-level-height) * 2),\n            var(--high-color) calc(var(--per-level-height) * 3)\n          );\n          box-shadow: var(--standard-box-shadows);\n          transition: height 0.3s ease, background-image 0.3s ease;\n        }\n      }\n\n      span.label {\n        margin-left: 0.5em;\n        font-size: 16px;\n      }\n    }\n  `\n}\n\n(function(HTML, commands) {\n  HTML[commands.register]('NELowSignalLevel',\n    Levels,\n    { preset: 'low', signal: true, noBackground: true }\n  );\n\n  HTML[commands.register]('NEMediumSignalLevel',\n    Levels,\n    { preset: 'medium', signal: true, noBackground: true }\n  );\n\n  HTML[commands.register]('NEHighSignalLevel',\n    Levels,\n    { preset: 'high', signal: true, noBackground: true }\n  );\n\n  HTML[commands.register]('NELevel',\n    Levels,\n    { percent: 0 }\n  );\n})(HTML, commands);\n"],
  "mappings": "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",
  "names": ["doc", "args", "scriptSource", "percent", "HTML", "commands"]
}
